var SignupControllerAsync = (function() {
var signup = {};  // bleh (see comment below)
var secured_confirmed;
return ['$scope', '$location', 'mnemonics', 'tx_sender', 'notices', 'wallets', '$window', 'facebook', '$modal', 'gaEvent', '$q', 'reddit', 'storage', 'trezor', 'btchip', 'bip38',
        function SignupController($scope, $location, mnemonics, tx_sender, notices, wallets, $window, facebook, $modal, gaEvent, $q, reddit, storage, trezor, btchip, bip38) {
    // some Android devices have window.WebSocket defined and yet still don't support WebSockets
    var isUnsupportedAndroid = navigator.userAgent.match(/Android 4.0/i) ||
                               navigator.userAgent.match(/Android 4.1/i) ||
                               navigator.userAgent.match(/Android 4.2/i) ||
                               navigator.userAgent.match(/Android 4.3/i);
    var isIE = navigator.userAgent.match(/MSIE/i) || navigator.userAgent.match(/Trident/i);
    var isChrome = navigator.userAgent.match(/Chrome/i);
    if (!window.cordova && (isIE || !window.crypto || !window.WebSocket || !window.Worker || (isUnsupportedAndroid && !isChrome))) {
        $location.path('/browser_unsupported');
        return;
    }
    var requires_mnemonic = ($location.path() == '/signup_pin' || $location.path() == '/signup_oauth' || $location.path() == '/signup_2factor');
    if (requires_mnemonic && !signup.mnemonic && !tx_sender.trezor_dev) {
        $location.path('/create');
        return;
    }
    if (!$scope.wallet.signup) {  // clear for case of other signup done previously in the same browser/crx session
        for (k in signup) {
            signup[k] = undefined;
        }
    }
    $scope.signup = signup;
    if ($location.path() == '/trezor_signup') {
        signup.is_trezor = true;
        signup.seed_progress = 100;
    } else if ($location.path() == '/create') {
        signup.is_trezor = false;
    }
    signup.noLocalStorage = storage.noLocalStorage;
    $scope.$digest();  // not sure why is this necessary, but i'm already too annoyed with this JS to find out...
    $scope.wallet.hidden = true;
    $scope.wallet.signup = true;

    var trezor_dev;

    if (signup.fbloginstate === undefined) {
        secured_confirmed = $q.defer();
        signup.fbloginstate = {};
        signup.redditloginstate = {};
        signup.customloginstate = {};
        if (!signup.is_trezor)
            signup.seed_progress = 0;
        var entropy, hdwallet;
        
        var generate_mnemonic = function() {
            $scope.signup.unexpected_error = false;
            var max256int_hex = '';
            while (max256int_hex.length < 256/4) max256int_hex += 'F';
            var TWOPOWER256 = new Bitcoin.BigInteger(max256int_hex, 16).add(Bitcoin.BigInteger.ONE);
            entropy = Bitcoin.ecdsa.getBigRandom(TWOPOWER256).toByteArrayUnsigned();
            $scope.signup.seed = Bitcoin.convert.bytesToHex(entropy);
            while (entropy.length < 32) entropy.ushift(0);
            mnemonics.toMnemonic(entropy).then(function(mnemonic) {
                mnemonics.toSeed(mnemonic).then(function(seed) {
                    mnemonics.toSeed(mnemonic, 'greenaddress_path').then(function(path_seed) {
                        $q.when(Bitcoin.HDWallet.fromSeedHex(seed, cur_net)).then(function(hdwallet) {
                            hdwallet.seed_hex = seed;
                            var master_public = hdwallet.pub.toHex();
                            var master_chaincode = Bitcoin.convert.bytesToHex(hdwallet.chaincode);
                            secured_confirmed.promise.then(function() {
                                tx_sender.call('http://greenaddressit.com/login/register',
                                    master_public, master_chaincode).then(function(data) {
                                        wallets.login($scope, hdwallet, mnemonic, true, false, path_seed).then(function(data) {
                                            gaEvent('Signup', 'LoggedIn');
                                            if ($scope.wallet.signup_fb_prelogged_in) {
                                                $scope.signup.fblogin();
                                            }
                                            if ($scope.wallet.signup_reddit_prelogged_in) {
                                                $scope.signup.redditlogin($scope.wallet.signup_reddit_prelogged_in);
                                            }
                                            $scope.signup.logged_in = data;
                                            if (!data) $scope.signup.login_failed = true;
                                        });
                                    });
                            });
                        });
                    }, null, function(progress) {
                        $scope.signup.seed_progress = Math.round(50 + progress/2);
                    });
                }, function(err) {
                    $scope.signup.unexpected_error = err;
                }, function(progress) {
                    // any progress means the mnemonic is valid so we can display it
                    $scope.wallet.mnemonic = $scope.signup.mnemonic = mnemonic;
                    $scope.signup.seed_progress = Math.round(progress/2);
                });
            }, function(err) {
                $scope.signup.unexpected_error = err.status || err;
            });
        };
        if (signup.is_trezor) {
            trezor.getDevice().then(function(dev) {
                $scope.trezor_dev = trezor_dev = dev;
                trezor_dev.getPublicKey([]).then(function(pubkey) {
                    $scope.$apply(function() {
                        var trezor_chaincode = pubkey.message.node.chain_code;
                        var trezor_pubkey = pubkey.message.node.public_key;
                        tx_sender.call('http://greenaddressit.com/login/register',
                            trezor_pubkey, trezor_chaincode).then(try_login, try_login);
                    });
                });
            });
            
            var try_login = function() {
                var path_seed = [];
                trezor_dev.getPublicKey([18241 + 0x80000000]).then(function(pubkey) {
                    var extended = pubkey.message.node.chain_code + pubkey.message.node.public_key;
                    var path = Bitcoin.CryptoJS.HmacSHA512(extended, 'GreenAddress.it HD wallet path');
                    path = Bitcoin.CryptoJS.enc.Hex.stringify(path);
                    wallets.login_trezor($scope, trezor_dev, path, true, false).then(function(data) {
                        gaEvent('Signup', 'LoggedIn');
                        if ($scope.wallet.signup_fb_prelogged_in) {
                            $scope.signup.fblogin();
                        }
                        if ($scope.wallet.signup_reddit_prelogged_in) {
                            $scope.signup.redditlogin($scope.wallet.signup_reddit_prelogged_in);
                        }
                        $scope.signup.logged_in = data;
                        if (!data) $scope.signup.login_failed = true;
                    });
                });
            };

        } else {
            generate_mnemonic();
        }
    }

    $scope.signup.try_again = function() {
        // should not ever happen, but just in case we have another bug
        generate_mnemonic();
    };

    var secured_confirmed_resolved = false;
    $scope.$watch('signup.secured_confirmed', function(newValue, oldValue) {
        if (newValue == oldValue) return;
        if (newValue && !secured_confirmed_resolved) { 
            if (window.disableEuCookieComplianceBanner) {
                disableEuCookieComplianceBanner();
            }
            secured_confirmed.resolve(true);
            secured_confirmed_resolved = true;
        }
    });

    $scope.signup.set_pin = function() {
        var next_page = '/signup_oauth';
        if (!$scope.signup.pin) {
            gaEvent('Signup', 'PinSkippedToOauth');
            $location.url(next_page + '#content_container');
            return;
        }
        $scope.signup.setting_pin = true;
        wallets.create_pin($scope.signup.pin.toString(), $scope).then(function() {
            gaEvent('Signup', 'PinSet');
            $scope.signup.pin_set = true;
            $scope.signup.setting_pin = false;
            $location.url(next_page);
        }, function(failure) {
            gaEvent('Signup', 'PinSettingFailed', failure);
            notices.makeNotice('error', 'Failed setting PIN.' + (failure ? ' ' + failure : ''));
            $scope.signup.setting_pin = false;
        });

    };

    $scope.signup.fblogin = function() {
        gaEvent('Signup', 'FbLoginClicked');
        facebook.login($scope.signup.fbloginstate).then(function() {
            var auth = FB.getAuthResponse();
            $scope.signup.social_in_progress = true;
            tx_sender.call('http://greenaddressit.com/addressbook/sync_fb', auth.accessToken).then(function() {
                gaEvent('Signup', 'FbSyncEnabled');
                $scope.signup.social_in_progress = false;
                $scope.signup.any_social_done = true;
                $scope.signup.fbloginstate.synchronized = true;
            }, function(err) {
                gaEvent('Signup', 'FbSyncFailed', err.desc);
                notices.makeNotice('error', err.desc);
                $scope.signup.social_in_progress = false;
                $scope.signup.fbloginstate.logged_in = false;
            });
        });
    };

    $scope.signup.customlogin = function() {
        gaEvent('Signup', 'CustomLoginClicked');
        $scope.got_username_password = function(username, password) {
            tx_sender.call('http://greenaddressit.com/addressbook/sync_custom', username, password).then(function() {
                gaEvent('Signup', 'CustomLoginEnabled');
                notices.makeNotice('success', gettext('Custom login enabled'));
                $scope.signup.any_social_done = true;
                $scope.signup.customloginstate.synchronized = true;
                modal.close();
            }, function(err) {
                gaEvent('Signup', 'CustomLoginEnableFailed', err.desc);
                notices.makeNotice('error', err.desc);
            });
        };
        var modal = $modal.open({
            templateUrl: BASE_URL+'/'+LANG+'/wallet/partials/wallet_modal_custom_login.html',
            scope: $scope
        });
    }

    $scope.signup.redditlogin = function(token) {
        gaEvent('Signup', 'RedditLoginClicked');
        if (token) {
            var d = $q.when(token);
        } else {
            var d = reddit.getToken('identity');
        }
        d.then(function(token) {
            if (token) {
                $scope.signup.social_in_progress = true;
                tx_sender.call('http://greenaddressit.com/addressbook/sync_reddit', token).then(function() {
                    gaEvent('Signup', 'RedditSyncEnabled');
                    $scope.signup.social_in_progress = false;
                    $scope.signup.any_social_done = true;
                    $scope.signup.redditloginstate.synchronized = true;
                }, function(err) {
                    gaEvent('Signup', 'RedditSyncEnableFailed');
                    notices.makeNotice('error', err.desc);
                    $scope.signup.social_in_progress = false;
                    that.toggling_reddit = false;
                });
            }
        });
    };

    $scope.signup.qrmodal = function() {
        gaEvent('Signup', 'QrModal');
        $modal.open({
            templateUrl: BASE_URL+'/'+LANG+'/wallet/partials/signup_qr_modal.html',
            scope: $scope
        });
    };
    
    $scope.signup.nfcmodal = function() {
        gaEvent('Signup', 'NfcModal');
        var mnemonic, mime;
        if ($scope.signup.mnemonic_encrypted) {
            mnemonic = $scope.signup.mnemonic_encrypted;
            mime = 'x-ga/en';
        } else {
            mnemonic = $scope.wallet.mnemonic;
            mime = 'x-gait/mnc';
        }
        mnemonics.validateMnemonic(mnemonic).then(function(bytes) {
            $scope.nfc_bytes = bytes;
            $scope.nfc_mime = mime;
            $modal.open({
                templateUrl: BASE_URL+'/'+LANG+'/wallet/partials/signup_nfc_modal.html',
                scope: $scope,
                controller: 'NFCController'
            });
        });
    };

    $scope.signup.encrypt_mnemonic = function() {
        gaEvent('Signup', 'EncryptMnemonic');
        bip38.encrypt_mnemonic_modal($scope, Bitcoin.convert.hexToBytes($scope.signup.seed)).then(function(encrypted) {
            $scope.signup.mnemonic_encrypted = encrypted;
        });
    };

    $scope.signup.usbmodal = function() {
        btchip.setupSeed($scope.wallet.mnemonic).then(function() {
            $scope.signup.has_btchip = true;
        });
    }
}]})();
